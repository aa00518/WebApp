/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.14.0 (NJsonSchema v9.13.18.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class DownloadLogClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    getWHRep(): Observable<DownloadLog[] | null> {
        let url_ = this.baseUrl + "/api/DownloadLog/GetWHRep";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWHRep(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWHRep(<any>response_);
                } catch (e) {
                    return <Observable<DownloadLog[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<DownloadLog[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetWHRep(response: HttpResponseBase): Observable<DownloadLog[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DownloadLog.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DownloadLog[] | null>(<any>null);
    }

    getFRRep(): Observable<DownloadLog[] | null> {
        let url_ = this.baseUrl + "/api/DownloadLog/GetFRRep";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFRRep(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFRRep(<any>response_);
                } catch (e) {
                    return <Observable<DownloadLog[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<DownloadLog[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetFRRep(response: HttpResponseBase): Observable<DownloadLog[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DownloadLog.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<DownloadLog[] | null>(<any>null);
    }
}

@Injectable()
export class LineAccountingDaysClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    getLineAccountingDays(): Observable<LineAccountingDays[] | null> {
        let url_ = this.baseUrl + "/api/LineAccountingDays/GetLineAccountingDays";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLineAccountingDays(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLineAccountingDays(<any>response_);
                } catch (e) {
                    return <Observable<LineAccountingDays[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<LineAccountingDays[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetLineAccountingDays(response: HttpResponseBase): Observable<LineAccountingDays[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LineAccountingDays.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LineAccountingDays[] | null>(<any>null);
    }
}

@Injectable()
export class ProTraQPlantsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    get(): Observable<ProTraQPlants[] | null> {
        let url_ = this.baseUrl + "/api/ProTraQPlants/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ProTraQPlants[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProTraQPlants[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ProTraQPlants[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProTraQPlants.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProTraQPlants[] | null>(<any>null);
    }

    getWithSignalR(): Observable<ProTraQPlants[] | null> {
        let url_ = this.baseUrl + "/api/ProTraQPlants/GetWithSignalR";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWithSignalR(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWithSignalR(<any>response_);
                } catch (e) {
                    return <Observable<ProTraQPlants[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProTraQPlants[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetWithSignalR(response: HttpResponseBase): Observable<ProTraQPlants[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProTraQPlants.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProTraQPlants[] | null>(<any>null);
    }
}

@Injectable()
export class SampleDataClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    weatherForecasts(): Observable<WeatherForecast[] | null> {
        let url_ = this.baseUrl + "/api/SampleData/WeatherForecasts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherForecasts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherForecasts(<any>response_);
                } catch (e) {
                    return <Observable<WeatherForecast[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<WeatherForecast[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processWeatherForecasts(response: HttpResponseBase): Observable<WeatherForecast[] | null> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WeatherForecast[] | null>(<any>null);
    }
}

export class DownloadLog implements IDownloadLog {
    tableName?: string | undefined;
    comparisonType?: string | undefined;
    queueID!: number;
    scheduleID!: number;
    batchID!: number;
    scheduledRunDT!: Date;
    startDT!: Date;
    mergeEndDT!: Date;
    bulkCopyTime!: number;
    mergeTime!: number;
    totalTime!: number;
    updateCount!: number;
    insertCount!: number;
    deleteCount!: number;
    rawCount!: number;
    resultCode!: number;
    resultText?: string | undefined;
    detailText?: string | undefined;

    constructor(data?: IDownloadLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tableName = data["tableName"];
            this.comparisonType = data["comparisonType"];
            this.queueID = data["queueID"];
            this.scheduleID = data["scheduleID"];
            this.batchID = data["batchID"];
            this.scheduledRunDT = data["scheduledRunDT"] ? new Date(data["scheduledRunDT"].toString()) : <any>undefined;
            this.startDT = data["startDT"] ? new Date(data["startDT"].toString()) : <any>undefined;
            this.mergeEndDT = data["mergeEndDT"] ? new Date(data["mergeEndDT"].toString()) : <any>undefined;
            this.bulkCopyTime = data["bulkCopyTime"];
            this.mergeTime = data["mergeTime"];
            this.totalTime = data["totalTime"];
            this.updateCount = data["updateCount"];
            this.insertCount = data["insertCount"];
            this.deleteCount = data["deleteCount"];
            this.rawCount = data["rawCount"];
            this.resultCode = data["resultCode"];
            this.resultText = data["resultText"];
            this.detailText = data["detailText"];
        }
    }

    static fromJS(data: any): DownloadLog {
        data = typeof data === 'object' ? data : {};
        let result = new DownloadLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tableName"] = this.tableName;
        data["comparisonType"] = this.comparisonType;
        data["queueID"] = this.queueID;
        data["scheduleID"] = this.scheduleID;
        data["batchID"] = this.batchID;
        data["scheduledRunDT"] = this.scheduledRunDT ? this.scheduledRunDT.toISOString() : <any>undefined;
        data["startDT"] = this.startDT ? this.startDT.toISOString() : <any>undefined;
        data["mergeEndDT"] = this.mergeEndDT ? this.mergeEndDT.toISOString() : <any>undefined;
        data["bulkCopyTime"] = this.bulkCopyTime;
        data["mergeTime"] = this.mergeTime;
        data["totalTime"] = this.totalTime;
        data["updateCount"] = this.updateCount;
        data["insertCount"] = this.insertCount;
        data["deleteCount"] = this.deleteCount;
        data["rawCount"] = this.rawCount;
        data["resultCode"] = this.resultCode;
        data["resultText"] = this.resultText;
        data["detailText"] = this.detailText;
        return data; 
    }
}

export interface IDownloadLog {
    tableName?: string | undefined;
    comparisonType?: string | undefined;
    queueID: number;
    scheduleID: number;
    batchID: number;
    scheduledRunDT: Date;
    startDT: Date;
    mergeEndDT: Date;
    bulkCopyTime: number;
    mergeTime: number;
    totalTime: number;
    updateCount: number;
    insertCount: number;
    deleteCount: number;
    rawCount: number;
    resultCode: number;
    resultText?: string | undefined;
    detailText?: string | undefined;
}

export class LineAccountingDays implements ILineAccountingDays {
    lineID!: number;
    lineName?: string | undefined;
    startDate!: Date;
    endDate!: Date;
    plantTimeID!: number;
    pStartTime!: Date;
    description?: string | undefined;

    constructor(data?: ILineAccountingDays) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.lineID = data["lineID"];
            this.lineName = data["lineName"];
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : <any>undefined;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : <any>undefined;
            this.plantTimeID = data["plantTimeID"];
            this.pStartTime = data["pStartTime"] ? new Date(data["pStartTime"].toString()) : <any>undefined;
            this.description = data["description"];
        }
    }

    static fromJS(data: any): LineAccountingDays {
        data = typeof data === 'object' ? data : {};
        let result = new LineAccountingDays();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lineID"] = this.lineID;
        data["lineName"] = this.lineName;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["plantTimeID"] = this.plantTimeID;
        data["pStartTime"] = this.pStartTime ? this.pStartTime.toISOString() : <any>undefined;
        data["description"] = this.description;
        return data; 
    }
}

export interface ILineAccountingDays {
    lineID: number;
    lineName?: string | undefined;
    startDate: Date;
    endDate: Date;
    plantTimeID: number;
    pStartTime: Date;
    description?: string | undefined;
}

export class ProTraQPlants implements IProTraQPlants {
    facilityID!: number;
    companyID!: number;
    facilityNumber!: number;
    proTraQURL?: string | undefined;
    proTraQURLShort?: string | undefined;
    proTraQURLSimplified?: string | undefined;
    facilityName?: string | undefined;
    address1?: string | undefined;
    address2?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    extendedZipCode?: string | undefined;
    itemMasterDownloadFacilities?: string | undefined;
    facilityAlpha?: string | undefined;

    constructor(data?: IProTraQPlants) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.facilityID = data["facilityID"];
            this.companyID = data["companyID"];
            this.facilityNumber = data["facilityNumber"];
            this.proTraQURL = data["proTraQURL"];
            this.proTraQURLShort = data["proTraQURLShort"];
            this.proTraQURLSimplified = data["proTraQURLSimplified"];
            this.facilityName = data["facilityName"];
            this.address1 = data["address1"];
            this.address2 = data["address2"];
            this.city = data["city"];
            this.region = data["region"];
            this.zipCode = data["zipCode"];
            this.extendedZipCode = data["extendedZipCode"];
            this.itemMasterDownloadFacilities = data["itemMasterDownloadFacilities"];
            this.facilityAlpha = data["facilityAlpha"];
        }
    }

    static fromJS(data: any): ProTraQPlants {
        data = typeof data === 'object' ? data : {};
        let result = new ProTraQPlants();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["facilityID"] = this.facilityID;
        data["companyID"] = this.companyID;
        data["facilityNumber"] = this.facilityNumber;
        data["proTraQURL"] = this.proTraQURL;
        data["proTraQURLShort"] = this.proTraQURLShort;
        data["proTraQURLSimplified"] = this.proTraQURLSimplified;
        data["facilityName"] = this.facilityName;
        data["address1"] = this.address1;
        data["address2"] = this.address2;
        data["city"] = this.city;
        data["region"] = this.region;
        data["zipCode"] = this.zipCode;
        data["extendedZipCode"] = this.extendedZipCode;
        data["itemMasterDownloadFacilities"] = this.itemMasterDownloadFacilities;
        data["facilityAlpha"] = this.facilityAlpha;
        return data; 
    }
}

export interface IProTraQPlants {
    facilityID: number;
    companyID: number;
    facilityNumber: number;
    proTraQURL?: string | undefined;
    proTraQURLShort?: string | undefined;
    proTraQURLSimplified?: string | undefined;
    facilityName?: string | undefined;
    address1?: string | undefined;
    address2?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    zipCode?: string | undefined;
    extendedZipCode?: string | undefined;
    itemMasterDownloadFacilities?: string | undefined;
    facilityAlpha?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    dateFormatted?: string | undefined;
    temperatureC!: number;
    summary?: string | undefined;
    temperatureF!: number;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dateFormatted = data["dateFormatted"];
            this.temperatureC = data["temperatureC"];
            this.summary = data["summary"];
            this.temperatureF = data["temperatureF"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateFormatted"] = this.dateFormatted;
        data["temperatureC"] = this.temperatureC;
        data["summary"] = this.summary;
        data["temperatureF"] = this.temperatureF;
        return data; 
    }
}

export interface IWeatherForecast {
    dateFormatted?: string | undefined;
    temperatureC: number;
    summary?: string | undefined;
    temperatureF: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}